1.3 웹 서비스의 동작 원리 이해하기

■ 웹 서비스는 클라이언트의 요청에 따른 서버의 응답으로 동작.

■ 클라이언트: 서비스를 사용하는 프로그램 또는 컴퓨터
■ 서버: 서비스를 제공하는 프로그램 또는 컴퓨터

■ localhost
내 컴퓨터를 의미

=========================

2장 MVC 패턴 이해와 실습

2.1 뷰 템플릿과 MVC 패턴

스프링 부트 프로젝트를 만들 때 머스테치 라는 도구가 뷰 템플릿을 만드는 도구

2.1.2 MVC 패턴

뷰: 화면을 담당하는 뷰탬플릿
컨트롤러: 클라이언트의 요청에 따라 서버에서 이를 처리하는 역할
모델: 데이터를 관리하는 역할

-> MVC 패턴(Model-View-Controller Pattern)

2.2 MVC 패턴을 활용해 뷰 템플릿 페이지 만들기

2.2.3 모델 추가하기

■ 요약
1. 뷰 페이지 만들기
greetings.mustache

2. 컨트롤러 만들기
FirstController.java

3. 컨트롤러에서 뷰 페이지 반환하기
return "greetings"

4. 뷰 페이지에 변수 삽입하기
{{username}}

5. 컨트롤러에 모델 추가하기
niceToMeetYou(Model model)

6. 모델에서 변수 등록하기
model.addAttribute("username". "홍팍")

2.3 MVC의 역할과 실행 흐름 이해하기

1. FirstController 파일이 컨트롤러임을 선언
2. 클라이언트로부터 "/hi"라는 요청을 받아 접수
3. "/hi" 라는 요청을 받음과 동시에 niceToMeetYou() 메서드를 수행
4. 뷰 템플릿 페이지에서 사용할 변수를 등록하기 위해 모델 객체를 매개변수로 가져온다.
5. 모델에서 사용할 변수를 등록한다. 변수값에 따라 서로 다른 뷰 템플릿 페이지가 출력된다.
6. 메서드를 수행한 결과로 greetings.mustache 파일을 반환한다.
  이때 return문에는 파일 이름만 작성.(return "greetings";).
  그러면 서버가 알아서 templates 디렉터리에 있는 해당 뷰 템플릿 페이지를 찾아 웹 브라우저로 전송.

2.3.2 /bye 페이지의 실행 흐름

2.4 뷰 템플릿 페이지에 레이아웃 적용하기

■ 레이아웃(layout)
: 화면에 요소를 배치하는 일

■ 헤더-푸터 레이아웃(header-footer-layout)
: 기본적인 레이아웃
- 상단의 헤더(header)영억에는 사이트 안내를 위한 내비게이션을 넣고
- 하단의 푸터(footer) 영역에는 사이트 정보를 넣는다.
- 두 영역 사이에는 사용자가 볼 핵심 내용인 콘텐트(content)를 배치

2.4.1 /hi 페이지에 헤더-푸터 레이아웃 적용하기

부트스트랩(https://getbootstrap.com) 활용

2.4.2 /bye 페이지에 헤더-푸터 레이아웃 적용하기

/hi 페이지를 템플릿화 해서 사용
위에는 {{>header}}, 아래는 {{>footer}}

폴더를 지정해서 파일을 만들고
footer.mustache
header.mustache

최종적으로는 
{{>layout/header}}
{{>layouts/footer}}

■ 마무리
1. 뷰 템플릿
: 웹 페이지를 하나의 틀로 만들고 여기에 변수를 삽입해 서로 다른 페이지로 보여 주는 기술

2. MVC 패턴
: 웹 페이지를 화면에 보여주고(View), 클라이언트의 요청을 받아 처리하고(Controller),
데이터를 관리하는(Model) 역할을 영역별로 나누어 하는 기법

3. 뷰 템플릿 생성 위치
src > main > resource > templates 디렉터리에 만든다.
머스테치 뷰 템플릿의 확장자는 .mustache 이다

4. 컨트롤러 생성 위치
src > main > java > 기본 패키지 안에 컨트롤러 패키지를 만든 후 자바 클래스 파일을 생성하는 방식으로 만든다.
확장자는 .java

5. 모델을 통해 변수 등록하는 방법
모델은 컨트롤러의 메서드에서 ㅐ개변수로 받아 온다.
모델에서 변수를 등록할 때는 addAttribute() 메서드를 사용.

6. 헤더-푸터 레이아웃
가장 기본이 되는 레이아웃.

7. 레이아웃 템플릿 생성과 적용
1) 레이아웃 템플릿 파일은 src > main > resource > templates 디렉터리에 만든다.
2) 머스테치 템플릿 파일의 확장자는 .mustache
3) 레이아웃 템플릿을 삽입할 때는 원하는 위치에서 {{>파일경로/파일명}} 형식으로 작성한다.

